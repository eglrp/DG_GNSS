% Distance geometry software GPS receiver
%------------------------------------------------------------------------ 
% 
% This program provides GPS receiver functionality for post-processing
% data recorded in Receiver Independant Exchange (RINEX) files. The
% positioning algorithm is based on a distance geoemetry approach
% introduced by Shahrdad Tabib* and is part of an ongoing research project
% at the University of California, Davis.
%
% Input:
% Navigation RINEX file
% Observation RINEX file
%
% Output:
% GPS position estimates in an ECEF reference frame (X, Y, Z)
% GPS position estimates in a geographic reference frame (lat., long., h)
%
%------------------------------------------------------------------------
%
% * Tabib, S., A coordinate free distance geometry approach to the GPS and 
% kinematical computations for general localization, Ph.D. thesis,
% University of California, Davis (2007).
%
%------------------------------------------------------------------------
%
% Copyright 2016, Hadi Tabatabaee, All rights reserved.
%
%------------------------------------------------------------------------

% Loading RINEX navigation file
[Eph, iono, constellations] = load_RINEX_nav('brdm1660.13p', [], 0);
%[Eph, iono, constellations] = load_RINEX_nav('site247j.01n', [], 0);

% Loading RINEX observation file
[pr1, ph1, pr2, ph2, dop1, dop2, snr1, snr2, time_ref, time, week, date, pos, interval, antoff, antmod, codeC1] = load_RINEX_obs('gmsd1660_cut.13o', []);
%[pr1, ph1, pr2, ph2, dop1, dop2, snr1, snr2, time_ref, time, week, date, pos, interval, antoff, antmod, codeC1] = load_RINEX_obs('site247j.01o', []);

nEpochs = length(time);      


nSatTot = constellations.nEnabledSat;
err_iono = zeros(nSatTot,nEpochs);
err_tropo = zeros(nSatTot,nEpochs);            
dtR = zeros(length(time),1);
dtR_dot = zeros(length(time),1);
XR = zeros(3, length(time));
XS = zeros(4, 3, length(time));
time_interval = interval; %initialization of time interval
c = 299792458;

% Locate satellites using Eph (this will need receiver clock bias as input)
% For now assume dtR = 0 for first epoch.


for i = 1 : length(time)
    sat0 = find(pr1(:,i) ~= 0);

    [XS, dtS, XS_tx, VS_tx, time_tx, no_eph, sys, traveltime] = satellite_positions(time(i), pr1(:,i), sat0, Eph, [], [], err_tropo, err_iono, dtR(i,1));
    XS = XS';
    pr = pr1(sat0, i);
    pr = pr + c*dtS;
    [XR(:,i), dtR2(i)] = DG_sol_eff(XS, pr);
    [XR2(:,i), dtR2(i)] = tikhonov(XS, pr);
    [XR3(:,i), dtR3(i)] = leastSquare_eff(XS, pr);
end      



% Saving outputs
% time_stamp = datestr(now, 'mmddyyHHMMSS');
% mkdir(strcat('./data/', 'DG_', time_stamp));
% pathname = strcat('./data/', 'DG_', time_stamp, '/');
% save(strcat(pathname,'DG_XR_', time_stamp), 'XR');
% save(strcat(pathname,'DG_time_', time_stamp), 'time');
% save(strcat(pathname,'DG_dtR_', time_stamp), 'dtR');
% save(strcat(pathname,'DG_pr1_', time_stamp), 'pr1');

legend1 = 'distance geometry';
legend2 = 'DG - w/ Tikhonov';
legend3 = 'Least Squares';
legend4 = 'Real Position';

figure
subplot(3,1,1); title('X - coordinate (ECEF)');
ylabel('X (m)')
hold on
plot(1:400, XR1(1,:) - pos(1))
plot(1:400, XR2(1,:) - pos(1))
plot(1:400, XR3(1,:) - pos(1))
plot(1:400, 0*pos(1)*ones(400,1))
legend(legend1, legend2, legend3, legend4)

subplot(3,1,2); title('Y - coordinate (ECEF)');
ylabel('Y (m)')
hold on
%plot(1:400, XR(1,:))
plot(1:400, XR1(2,:) - pos(2))
plot(1:400, XR2(2,:) - pos(2))
plot(1:400, XR3(2,:) - pos(2))
plot(1:400, 0*pos(2)*ones(400,1))
legend(legend1, legend2, legend3, legend4)

subplot(3,1,3); title('Z - coordinate (ECEF)');
ylabel('Z (m)')
xlabel('Time (s)')
hold on
%plot(1:400, XR(1,:))
plot(1:400, XR1(3,:) - pos(3))
plot(1:400, XR2(3,:) - pos(3))
plot(1:400, XR3(3,:) - pos(3))
plot(1:400, 0*pos(3)*ones(400,1))
legend(legend1, legend2, legend3, legend4)
